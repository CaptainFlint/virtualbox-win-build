<a href="<%selfref%>"><img align="center" src="<%logo%>"/></a>
<br/>
<h4><img src="<%bullet%>"/> Введение</h4>
<br/>
Как известно большинству пользователей Windows-версии VirtualBox (далее — <em>VB</em>, не путать с Visual Basic), в релизе 4.3.14 разработчики этой программы добавили дополнительный механизм защиты, называемый «hardening» (что можно перевести как «упрочнение»), который привёл к многочисленным проблемам совместимости VB с антивирусами, драйверами крипто-модулей и даже отдельными обновлениями самой Windows, в результате чего виртуальные машины попросту отказываются запускаться. В лучшем случае пользователю приходится ждать около месяца, пока проблемная программа, о которой он сообщит разработчикам, окажется учтена в следующем релизе VB. В худшем случае придётся либо удалять конфликтующую программу (или системное обновление), либо откатывать VB до версии 4.3.12 — последней, в которой не было этой защиты. Многочисленные предложения к разработчикам о добавлении пользовательского списка исключений или опции, отключающей защиту целиком, остаются без внимания. Единственный внятный ответ с их стороны звучит так: «не хотите защиту — компилируйте из исходников сами». Что ж, придётся этим заняться.<br/>
<br/>
Несмотря на то, что процедура сборки <a href="https://www.virtualbox.org/wiki/Windows%20build%20instructions">описана</a> на официальной вики, она неполна и кое в чём устарела, а сама сборка так и норовит выдать странные ошибки. Поэтому когда я всё-таки пробился до конца сей процедуры, я решил, что её описание заслуживает отдельной статьи. Инструкция адаптирована для VB версии 5.2.18, но если кого-то заинтересует сборка более ранних версий VB или библиотек, информацию можно выцарапать из <a href="https://github.com/CaptainFlint/virtualbox-winbuild-article/">истории правок</a>.<br/>
<br/>
<cut text="Я заинтересован" />
<h4><img src="<%bullet%>"/> Содержание</h4>
<blockquote>
» <a href="#task">Постановка задачи</a><br/>
» <a href="#warnings">Пара предупреждений</a><br/>
» <a href="#environment">Готовим окружение</a><br/>
» <a href="#environment-inst">Особенности установки программ</a><br/>
» <a href="#final-touches">Последние штрихи</a><br/>
» <a href="#build-vb">Собираем VirtualBox</a><br/>
» <a href="#afterword">Послесловие</a><br/>
» <a href="#history">Дополнения</a><br/>
</blockquote>
<br/>

<anchor>task</anchor><h4><img src="<%bullet%>"/> Постановка задачи</h4><br/>
Изначально я планировал упростить себе задачу и обойтись минимальной пересборкой, чтобы устанавливать официальный дистрибутив и просто подменять в нём бинарные файлы. Однако оказалось, что такой подход не сработает, поскольку не учитывает использование системных механизмов установки и регистрации драйверов и COM-компонентов. Можно было бы попытаться разобраться в деталях и написать автоматизирующий скрипт, но я решил замахнуться на более крупную дичь: самостоятельно собрать полноценный дистрибутив, максимально близкий к официальному и отличающийся от него только отсутствием hardening'а.<br/>
<br/>
Сразу скажу, что на 100% задачу решить не удалось. Слабым звеном оказались гостевые дополнения, которые в официальном пакете собраны под Windows (32- и 64-битную), Linux, Solaris и OS/2. В комментариях соответствующего Makefile указано, что сборка осуществляется удалённо на разных машинах, а настраивать такой комплект виртуалок мне не улыбалось. В итоге я решил собирать из исходных кодов всё, кроме дополнений, ISO-образ которых буду просто скачивать с сервера Oracle. Я пока не исследовал вопрос наличия hardening'а в дополнениях, но даже если он там есть, сообщений о вызванных им проблемах мне до сих пор не попадалось.<br/>
<br/>
<anchor>warnings</anchor><h4><img src="<%bullet%>"/> Пара предупреждений</h4><br/>
<h5>• Проблемы безопасности</h5><br/>
Про hardening известно, что добавили его не просто так, а для закрытия некой уязвимости VB. Внятно рассказать о сути уязвимости Oracle категорически отказывается, несмотря на то, что с момента фикса прошло больше двух лет. Ограничиваются лишь намёками на «очень уязвимую архитектуру Windows, разрешающую загрузку сторонних модулей в чужие процессы». Вопрос о том, как же без подобных ухищрений умудряются работать другие системы виртуализации (да и вообще все программы), также остаётся без ответа. Из отдельных скупых фраз на официальном форуме удалось выудить информацию, что проблема связана с повышением привилегий на хостовой машине, и что для этой уязвимости VB есть реально использующиеся эксплойты. Если это вас не пугает, можете продолжать чтение, но я вас предупредил.<br/>
<br/>
<h5>• Подписывание драйверов</h5><br/>
Как известно, 64-битная Windows в обычном режиме запрещает загрузку драйверов, не подписанных сертификатом с цепочкой доверия, ведущей до корневого сертификата Microsoft (а в Windows 10 предпринимаются шаги к запрету вообще всех драйверов, подписанных не в Microsoft). Поэтому прежде чем компилировать VB даже для личного использования, необходимо продумать решение этой проблемы: либо купить сертификат, либо попробовать воспользоваться сервисами подписывания драйверов для разработчиков Open Source (если они, конечно, согласятся подписать заведомо уязвимый драйвер), либо перевести свою Windows в тестовый режим и использовать самоподписанный тестовый сертификат.<br/>
<br/>
Далее я буду ориентироваться на этот последний вариант, но в нужных местах укажу, как поменяется процедура при наличии полноценного сертификата.<br/>
<br/>
<anchor>environment</anchor><h4><img src="<%bullet%>"/> Готовим окружение</h4><br/>
Официально в качестве сборочной системы рекомендуется Windows версии от XP SP3 до 7. Всю работу я проводил в Windows 7 SP1 x64, но, думаю, что с более современными версиями проблем возникнуть не должно. Если вы выделяете для сборки отдельную машину (реальную или виртуальную), имейте в виду, что ей необходим доступ в Интернет.<br/>
<br/>
Для создания сборочного окружения потребуется немаленький набор программ. Если для программы присутствует портабельная версия, я использую её, а не инсталлятор.<br/>
<br/>
Следующий набор программ поставляется только в виде инсталляторов (по крайней мере, официально). Для Visual Studio и SDK/WDK важно соблюдать порядок установки, как указано ниже. После установки крайне желательно установить обновления через Windows Update с включённой опцией поддержки всех продуктов Microsoft.<br/>
<ul>
<li><b>Visual Studio 2010 Professional</b><br/>Для полноценной сборки требуется именно 2010, и именно Professional. В версии 2010 Express нет библиотеки ATL, необходимой для сборки COM API, через который работают фронт-энды. Я сделал несколько попыток перенести проект на VS 2013 или 2015 Community Edition, чтобы избавиться от необходимости платной лицензии, но, увы, безуспешно.</li>
<li><b><a href="http://www.microsoft.com/en-us/download/details.aspx?id=8279">Windows SDK v7.1</a></b></li>
<li><b><a href="https://www.microsoft.com/en-US/download/details.aspx?id=23691">Visual Studio 2010 SP1</a></b></li>
<li><b><a href="https://www.microsoft.com/en-us/download/details.aspx?id=4422">Visual C++ 2010 SP1 Compiler Update for SDK 7.1</a></b></li>
<li><b><a href="http://www.microsoft.com/en-us/download/details.aspx?displaylang=en&id=11800">Windows Driver Development Kit (WDK) v7.1</a></b></li>
<li><b><a href="https://dev.windows.com/downloads/windows-8-1-sdk">Windows SDK v8.1</a></b></li>
<li><b><a href="http://www.activestate.com/activeperl/downloads">ActivePerl</a></b> с дополнительным модулем <code>Text::Template</code></li>
<li><b><a href="http://www.activestate.com/activepython/downloads">ActivePython 2.7</a></b></li>
</ul>
<br/>
Остальные программы скачиваются в виде архивов или исходных кодов:<br/>
<ul>
<li><b><a href="http://download.qt.io/official_releases/qt/5.6/5.6.3/single/qt-everywhere-opensource-src-5.6.3.zip">Qt 5.6.3</a></b> (исходные коды)</li>
<li><b>MinGW-w64 4.5.4</b>:
  <ul>
    <li><b><a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/rubenvb/gcc-4.5-release/i686-w64-mingw32-gcc-4.5.4-release-win32_rubenvb.7z/download">32-битная версия</a></b></li>
    <li><b><a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/rubenvb/gcc-4.5-release/x86_64-w64-mingw32-gcc-4.5.4-release-win64_rubenvb.7z/download">64-битная версия</a></b></li>
  </ul>
</li>
<li><b><a href="http://www.libsdl.org/download-1.2.php">SDL v1.2.x</a></b> (development-пакет для Visual C++)</li>
<li><b><a href="http://curl.haxx.se/download.html">cURL</a></b> (исходные коды)</li>
<li><b><a href="http://www.openssl.org/source/">OpenSSL 1.1.0</a></b> (исходные коды)</li>
<li><b><a href="http://sourceforge.net/projects/gsoap2/files/gsoap-2.8/">gSOAP 2.8.x</a></b> (рекомендуется 2.8.41 или выше)</li>
<li><b><a href="http://miktex.org/portable">MiKTeX Portable</a></b></li>
<li><b><a href="http://www.nasm.us/">NASM</a></b><br/>Рекомендую 64-битную портативную версию.</li>
<li><b><a href="http://wixtoolset.org/">WiX</a></b><br/>Рекомендую портативный набор (архив с именем вида <code>wix311-binaries.zip</code>).</li>
</ul>
<br/>
Также потребуются два архива:<br/>
<ul>
<li><b><a href="http://www.oasis-open.org/docbook/xml/4.5/docbook-xml-4.5.zip">DocBook XML DTD</a></b></li>
<li><b><a href="https://sourceforge.net/projects/docbook/files/docbook-xsl/1.79.1/docbook-xsl-1.79.1.zip/download">DocBook XSL Stylesheets</a></b></li>
</ul>
<br/>
<spoiler title="Зачем оно всё?">
Если вы не планируете собирать такой же пакет, как я, то некоторые из перечисленных инструментов могут вам не потребоваться. Здесь я вкратце перечислю, какую роль они выполняют.<br/>
<br/>
<ul>
<li><b>SDK 8.1</b><br/>
Для сборки будет использоваться SDK версии 7.1, версия 8.1 требуется только для утилиты SignTool: в 7.1 отсутствует поддержка двойного подписывания SHA-1/SHA-256. Если у вас есть компьютер с установленным SDK версии 8.1 или более поздней, можно просто скопировать утилиту signtool.exe оттуда (со всеми зависимостями) и указать соответствующий путь в файле <code>LocalConfig.kmk</code> (см. ниже).
</li>
<li><b>WiX</b><br/>
Это инструмент для создания MSI-инсталляторов. Хоть финальный вариант инсталлятора и является EXE-файлом, внутри он содержит два MSI, так что WiX тут необходим. Если вам достаточно простой компиляции бинарников, то этот пакет не понадобится.
</li>
<li><b>SDL</b><br/>
На этой библиотеке основан фронт-энд <code>VBoxSDL.exe</code> — минималистичная альтернатива стандартной оболочке <code>VirtualBox.exe</code>. Если вам не требуется VBoxSDL, то, может быть, удастся обойтись без библиотеки SDL, но я это не проверял.
</li>
<li><b>gSOAP</b><br/>
Этот компонент необходим для сборки сервиса удалённого управления VB: <code>VBoxWebSrv.exe</code>. Отсутствие gSOAP не является критической ошибкой, VB успешно соберётся без этого сервиса.
</li>
<li><b>MiKTeX</b><br/>
При помощи MiKTeX компилируется справочник в формате PDF (<code>doc\UserManual.pdf</code>). Отсутствие MiKTeX не является критической ошибкой, VB успешно соберётся без PDF-документации.
</li>
<li><b>NASM</b><br/>
Этот ассемблер будет использоваться для сборки OpenSSL. Поддерживается и сборка без внешнего ассемблера, но с ним будет создан более оптимальный код.
</li>
</ul>
</spoiler>
<br/>
Чтобы легче было отслеживать потенциальные источники проблем сборки, привожу здесь сводную таблицу всех инструментов с их версиями и путями установки в созданном мной окружении. Обозначение «<code>{x32|x64}</code>» указывает, что пакет устанавливается в два разных каталога для 32- и 64-битной версии.
<table>
<tr><th>Программа</th><th>Версия</th><th>Путь установки</th></tr>
<tr><td>Visual Studio</td><td>2010 Professional</td><td><code>C:\Program Files (x86)\Microsoft Visual Studio 10.0\</code></td></tr>
<tr><td>SDK</td><td>7.1</td><td><code>C:\Program Files\Microsoft SDKs\Windows\v7.1\</code></td></tr>
<tr><td>SDK</td><td>8.1</td><td><code>C:\Programs\DevKits\8.1\</code></td></tr>
<tr><td>WDK</td><td>7.1.0</td><td><code>C:\WinDDK\7600.16385.1\</code></td></tr>
<tr><td>ActivePerl</td><td>5.26.1 Build 2601 x64</td><td><code>C:\Programs\Perl\</code></td></tr>
<tr><td>ActivePython</td><td>2.7.14.2717 x64</td><td><code>C:\Programs\Python\</code></td></tr>
<tr><td>WiX</td><td>3.11.1.2318</td><td><code>C:\Programs\WiX\</code></td></tr>
<tr><td>Qt</td><td>5.6.3</td><td><code>C:\Programs\Qt\5.6.3-{x32|x64}\</code></td></tr>
<tr><td>MinGW-32</td><td>4.5.4</td><td><code>C:\Programs\mingw32\</code></td></tr>
<tr><td>MinGW-64</td><td>4.5.4</td><td><code>C:\Programs\mingw64\</code></td></tr>
<tr><td>SDL</td><td>1.2.15</td><td><code>C:\Programs\SDL\{x32|x64}\</code></td></tr>
<tr><td>cURL</td><td>7.61.0</td><td><code>C:\Programs\curl\{x32|x64}\</code></td></tr>
<tr><td>OpenSSL</td><td>1.1.0i</td><td><code>C:\Programs\OpenSSL\{x32|x64}\</code></td></tr>
<tr><td>gSOAP</td><td>2.8.70</td><td><code>C:\Programs\gSOAP\</code></td></tr>
<tr><td>MiKTeX Portable</td><td>2.9.5719</td><td><code>C:\Programs\MiKTeX\</code></td></tr>
<tr><td>NASM</td><td>2.13.03 x64</td><td><code>C:\Programs\nasm\</code></td></tr>
<tr><td>DocBook XML DTD</td><td>4.5</td><td><code>C:\Programs\DocBook\xml\</code></td></tr>
<tr><td>DocBook XSL Stylesheets</td><td>1.79.1</td><td><code>C:\Programs\DocBook\xsl\</code></td></tr>
</table>

<anchor>environment-inst</anchor><h4><img src="<%bullet%>"/> Особенности установки программ</h4><br/>
В этом разделе я привожу указания или инструкции для отдельных пакетов, где процедура неочевидна или требует дополнительных шагов.<br/>
<br/>
<h5>• Windows SDK v7.1</h5>
При установке могут возникнуть проблемы из-за устаревших версий компиляторов и рантайма: они не могут установиться поверх более новых версий, установленных с VS 2010, и инсталлятор считает это критической ошибкой. Необходимо либо отключить соответствующие галочки, либо предварительно удалить из системы пакеты с именами вида <i>«Microsoft Visual C++ 2010 &lt;arch&gt; Redistributable»</i>, <i>«Microsoft Visual C++ 2010 &lt;arch&gt; Runtime»</i>, <i>«Microsoft Visual C++ Compilers…»</i> (SDK установит старые версии пакетов, а Windows Update потом обновит их до актуальных).<br/>
<br/>
Также обратите внимание, что для финальной сборки MSI-пакетов потребуется установить примеры программ (Windows Native Code Development -&gt; Samples): в их составе идут скрипты, использующиеся сборочными правилами.<br/>
<br/>
<h5>• Windows SDK v8.1</h5>
Достаточно установить только средства разработки (Windows Software Development Kit).<br/>
<br/>
<h5>• WDK v7.1</h5>
Достаточно установить только сборочные окружения (Build Environments).<br/>
<br/>
<h5>• Perl</h5>
После установки необходимо доустановить модуль <code>Text::Template</code>, который нужен для сборки OpenSSL. Делается это командой:
<source lang=".bat">ppm install Text::Template</source>
<br/>
<h5>• Qt 5.6.3</h5>
Начиная с версии Qt 5.7.0 прекращена поддержка сборки в MSVC версий ниже 2012, поэтому используем 5.6.x.<br/>
Для Visual Studio 2010 официальные сборки отсутствуют, поэтому необходимо сначала собрать библиотеку из исходных кодов.<br/>
<br/>
<ol>
<li>Распаковываем архив с исходным кодом Qt в каталог <code>C:\Programs\Qt\</code> и переименовываем полученный подкаталог <code>qt-everywhere-opensource-src-5.6.3</code> в <code>5.6.3-src</code>.</li>
<li>Рядом создаём каталог <code>build-x32</code>, в котором будет происходить сборка.</li>
<li>
Открываем консоль, выполняем следующие команды:
<source lang=".bat">cd /d C:\Programs\Qt\build-x32
SET QTVER=5.6.3
"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x86 /win7
COLOR 07
SET QTDIR=C:\Programs\Qt\%QTVER%-x32
SET PATH=%QTDIR%\bin;%PATH%
SET QMAKESPEC=win32-msvc2010</source>
Команда <code>color</code> отключает зелёный цвет шрифта, устанавливаемый скриптом <code>SetEnv.Cmd</code>.
</li>
<li>
Теперь запускаем <code>configure.bat</code> из каталога <code>5.6.3-src</code>. Поскольку бо́льшая часть Qt в VB не используется, можно сильно ускорить сборку, отключив ненужные компоненты, но необходимо учитывать, что к некоторым опциям VB относится очень щепетильно. В частности, я наткнулся на следующее:
<ul>
<li>OpenGL ES 2 не поддерживается (компиляция VB не может увидеть некоторые заголовочные файлы).</li>
<li>Поддержка FreeType должна быть включена (без неё не соберётся плагин qoffscreen, использующийся в VB).</li>
</ul>
Вот итоговая команда, которую я использовал у себя:
<source lang=".bat">..\5.6.3-src\configure.bat -prefix c:\Programs\Qt\5.6.3-x32 -mp -opensource -confirm-license -nomake tests -nomake examples -no-compile-examples -release -shared -pch -no-ltcg -accessibility -no-sql-sqlite -opengl desktop -no-openvg -no-nis -no-iconv -no-evdev -no-mtdev -no-inotify -no-eventfd -largefile -no-system-proxies -qt-zlib -qt-pcre -no-icu -qt-libpng -qt-libjpeg -qt-freetype -no-fontconfig -qt-harfbuzz -no-angle -incredibuild-xge -no-plugin-manifests -qmake -qreal double -rtti -strip -no-ssl -no-openssl -no-libproxy -no-dbus -no-audio-backend -no-wmf-backend -no-qml-debug -no-direct2d -directwrite -no-style-fusion -native-gestures -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcanvas3d -skip qtconnectivity -skip qtdeclarative -skip qtdoc -skip qtenginio -skip qtgraphicaleffects -skip qtlocation -skip qtmacextras -skip qtmultimedia -skip qtquickcontrols -skip qtquickcontrols2 -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns</source>
</li>
<li>
Указанный каталог установки (опция <code>-prefix</code>) Qt записывает внутрь исходного кода при конфигурировании, так что собранная библиотека будет помнить этот путь. Это приводит к тому, что при запуске Qt-приложение по умолчанию будет искать плагины по этому пути, и только если ничего не нашлось, обратится к собственному каталогу. В большинстве ситуаций это работает корректно, но если вдруг на целевой машине в каталоге <code>c:\Programs\Qt\5.6.3-x32</code> окажется отличающаяся сборка Qt (с другими флагами), то VB при запуске свалится с ошибкой.<br/>
Избежать этого можно двумя путями: либо добавить в каталог VB файл <code>qt.conf</code> с содержимым:
<source>[Paths]
Plugins=.</source>
либо подправить сохранённый в Qt пусть установки, чтобы он по умолчанию указывал на каталог программы. Я пошёл по второму пути, чтобы итоговая установка VB выглядела более аккуратной. Для этого нужно открыть файл <code>C:\Programs\Qt\build-x32\qtbase\src\corelib\global\qconfig.cpp</code>, который создался конфигуратором, найти там строчку вида:
<source lang="cpp">static const char qt_configure_prefix_path_str       [512 + 12] = "qt_prfxpath=c:/Programs/Qt/5.6.3-x32";</source>
и заменить там весь путь на точку, чтобы получилось следующее:
<source lang="cpp">static const char qt_configure_prefix_path_str       [512 + 12] = "qt_prfxpath=.";</source>
Установка Qt при этом по-прежнему будет выполнена в указанный ранее каталог, потому что он уже сохранён в Makefile-ах. Это изменение затронет только поведение Qt-программ при их запуске.
</li>
<li>Далее запускаем сборку командой <code>nmake</code></li>
<li>Устанавливаем скомпилированную библиотеку командой <code>nmake install</code></li>
</ol>
<br/>
Теперь открываем новую консоль и аналогичным образом компилируем и устанавливаем 64-битную версию, только в именах каталогов необходимо заменить «x32» на «x64», а команды создания окружения будут выглядеть так:
<source lang=".bat">cd /d C:\Programs\Qt\build-x64
SET QTVER=5.6.3
"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x64 /win7
COLOR 07
SET QTDIR=C:\Programs\Qt\%QTVER%-x64
SET PATH=%QTDIR%\bin;%PATH%
SET QMAKESPEC=win32-msvc2010</source>
<br/>
После завершения установки каталоги <code>build-x32</code>, <code>build-x64</code> и <code>5.6.3-src</code> можно удалять.<br/>
<br/>
<h5>• MinGW</h5>
Архивы 32- и 64-битной версий просто распаковываются каждый в свой каталог.<br/>
<br/>
<h5>• SDL</h5>
<ol>
<li>Распаковываем SDL два раза в отдельные каталоги: <code>C:\Programs\SDL\x32\</code> и <code>C:\Programs\SDL\x64\</code>.</li>
<li>Перемещаем всё содержимое <code>C:\Programs\SDL\x64\lib\x64\</code> на уровень выше (в <code>C:\Programs\SDL\x64\lib\</code>), каталоги <code>C:\Programs\SDL\x64\lib\x86</code> и <code>x64</code> удаляем.</li>
<li>Аналогично для 32-битной версии: перемещаем содержимое <code>C:\Programs\SDL\x32\lib\x86\</code> на уровень выше, каталоги <code>C:\Programs\SDL\x32\lib\x86</code> и <code>x64</code> удаляем.</li>
</ol>
<br/>
<h5>• NASM</h5>
Распаковываем архив <code>nasm-2.13.03-win64.zip</code> в <code>C:\Programs\</code>, переименовываем полученный каталог <code>nasm-2.13.03</code> в <code>nasm</code>.<br/>
<br/>
<h5>• OpenSSL</h5>
<ol>
<li>Распаковываем архив OpenSSL два раза в каталог <code>C:\Programs\OpenSSL\</code>, переименовывая полученный подкаталог из <code>openssl-1.1.0i</code>, соответственно, в <code>openssl-1.1.0i-x32</code> и <code>openssl-1.1.0i-x64</code>.</li>
<li>Открываем консоль, собираем и устанавливаем 32-битную версию:
<source lang=".bat">"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x86 /win7
COLOR 07
set PATH=%PATH%;C:\Programs\nasm
cd /d C:\Programs\OpenSSL\openssl-1.1.0i-x32\
perl Configure VC-WIN32 no-shared --prefix=C:\Programs\OpenSSL\x32 --openssldir=C:\Programs\OpenSSL\x32\ssl
nmake
nmake test
nmake install</source>
Конфигуратор может выдать страшное сообщение, что, дескать, не может найти компилятор. Не обращайте внимания, это он слегка не в себе.<br/>
Если вы не хотите использовать NASM, исключите отсюда модификацию переменной <code>PATH</code> и добавьте к вызову <code>Configure</code> параметр <code>no-asm</code>.
</li>
<li>
Открываем новую консоль, собираем и устанавливаем 64-битную версию:
<source lang=".bat">"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x64 /win7
COLOR 07
set PATH=%PATH%;C:\Programs\nasm
cd /d C:\Programs\OpenSSL\openssl-1.1.0i-x64\
perl Configure VC-WIN64A no-shared --prefix=C:\Programs\OpenSSL\x64 --openssldir=C:\Programs\OpenSSL\x64\ssl
nmake
nmake test
nmake install</source>
Отказ от NASM делается аналогично 32-битной версии.
</li>
<li>Каталоги <code>C:\Programs\OpenSSL\openssl-1.1.0i-x32</code> и <code>openssl-1.1.0i-x64</code> можно удалять.</li>
</ol>
<br/>
<h5>• cURL</h5>
<ol>
<li>Распаковываем архив cURL в каталог: <code>C:\Programs\curl\</code>, переименовываем получившийся подкаталог из <code>curl-7.61.0</code> в <code>curl-7.61.0-x32</code>.</li>
<li>
Открываем в редакторе файл <code>C:\Programs\curl\curl-7.61.0-x32\winbuild\MakefileBuild.vc</code>, находим там в районе строк 61–69 условный блок вида:
<source>!IF "$(VC)"=="6"
CC_NODEBUG  = $(CC) /O2 /DNDEBUG
CC_DEBUG    = $(CC) /Od /Gm /Zi /D_DEBUG /GZ
CFLAGS      = /I. /I../lib /I../include /nologo /W4 /wd4127 /GX /DWIN32 /YX /FD /c /DBUILDING_LIBCURL
!ELSE
CC_NODEBUG  = $(CC) /O2 /DNDEBUG
CC_DEBUG    = $(CC) /Od /D_DEBUG /RTC1 /Z7 /LDd
CFLAGS      = /I. /I ../lib /I../include /nologo /W4 /wd4127 /EHsc /DWIN32 /FD /c /DBUILDING_LIBCURL
!ENDIF</source>
и добавляем после него строчку:
<source>CFLAGS      = $(CFLAGS) /DCURL_DISABLE_LDAP</source>
Если этого не сделать, то при сборке VB полезут ошибки линковки.
</li>
<li>
Открываем файл <code>C:\Programs\curl\curl-7.61.0-x32\winbuild\gen_resp_file.bat</code>, после первой строчки в нём (<code>@echo OFF</code>) вставляем команду:
<source>cd .</source>
Это фиктивная команда, которая ничего не делает, и задача её лишь в том, чтобы сбросить код ERRORLEVEL. В противном случае может возникнуть ситуация, когда этот код оказывается ненулевым ещё до запуска батника, а сам батник не выполняет ни одной команды, меняющей код возврата. В результате <code>nmake</code> считает, что батник вернул ошибку, и прерывает сборку.
</li>
<li>Делаем копию каталога <code>curl-7.61.0-x32</code> под именем <code>curl-7.61.0-x64</code>.</li>
<li>Открываем консоль, собираем 32-битную версию и копируем необходимые файлы в целевой каталог:
<source lang=".bat">"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x86 /win7
COLOR 07
cd /d C:\Programs\curl\curl-7.61.0-x32\winbuild
md C:\Programs\curl\x32
nmake /f Makefile.vc mode=static WITH_SSL=static DEBUG=no MACHINE=x86 SSL_PATH=C:\Programs\OpenSSL\x32 ENABLE_SSPI=no ENABLE_WINSSL=no ENABLE_IDN=no
copy ..\builds\libcurl-vc-x86-release-static-ssl-static-ipv6\lib\libcurl_a.lib ..\..\x32\libcurl.lib
xcopy /E ..\builds\libcurl-vc-x86-release-static-ssl-static-ipv6\include\curl ..\..\x32\include\curl\</source>
</li>
<li>
Собираем 64-битную версию, открыв новую консоль и выполнив команды:
<source lang=".bat">"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x64 /win7
COLOR 07
cd /d C:\Programs\curl\curl-7.61.0-x64\winbuild
md C:\Programs\curl\x64
nmake /f Makefile.vc mode=static WITH_SSL=static DEBUG=no MACHINE=x64 SSL_PATH=C:\Programs\OpenSSL\x64 ENABLE_SSPI=no ENABLE_WINSSL=no ENABLE_IDN=no
copy ..\builds\libcurl-vc-x64-release-static-ssl-static-ipv6\lib\libcurl_a.lib ..\..\x64\libcurl.lib
xcopy /E ..\builds\libcurl-vc-x64-release-static-ssl-static-ipv6\include\curl ..\..\x64\include\curl\
copy ..\builds\libcurl-vc-x64-release-static-ssl-static-ipv6\bin\curl.exe ..\..\x64\curl.exe</source>
Обратите внимание, что, в отличие от 32-битной версии, здесь мы копируем ещё и <code>curl.exe</code>, он нам потом понадобится для скачивания образа гостевых дополнений.
</li>
<li>Каталоги <code>C:\Programs\curl\curl-7.61.0-x32</code> и <code>curl-7.61.0-x64</code> можно удалять.</li>
</ol>
<br/>
<h5>• gSOAP</h5>
Открываем архив, заходим в подкаталог <code>gsoap-2.8\gsoap</code> и распаковываем содержимое этого подкаталога в <code>C:\Programs\gSOAP\</code>. Для корректной сборки с OpenSSL 1.1.x требуется версия 2.8.41 или выше. Для более ранних версий потребуется наложить специальный <a href="https://github.com/CaptainFlint/virtualbox-winbuild-article/blob/master/gsoap-openssl110.patch">патч</a> (автор: <a href="https://sourceforge.net/p/gsoap2/patches/166/">Mattias Ellert</a>). Можно это сделать вручную (формат достаточно очевидный: открываем поочерёдно указанные файлы, удаляем строчки, отмеченные минусами, и добавляем отмеченные плюсами; остальные строки помогают определить контекст), а можно взять стандартную утилиту patch, портированную для Windows, и натравить её.<br/>
<br/>
<h5>• MiKTeX</h5>
<ol>
<li>Распаковываем архив в <code>C:\Programs\MiKTeX\</code></li>
<li>
Открываем консоль и запускаем установку дополнительных модулей:
<source lang=".bat">"C:\Programs\MiKTeX\miktex\bin\mpm.exe" --verbose --install=koma-script --install=ucs --install=tabulary --install=url --install=fancybox --install=fancyvrb --install=bera --install=charter --install=mptopdf</source>
</li>
</ol>
<br/>
<h5>• DocBook</h5>
Для распаковки архива XML DTD нужно создать отдельный каталог и поместить туда все файлы. Архив с XSL Stylesheets уже содержит нужный подкаталог, поэтому достаточно его просто распаковать и переименовать полученный подкаталог.<br/>
<br/>

<anchor>final-touches</anchor><h4><img src="<%bullet%>"/> Последние штрихи</h4>
<br/>
Подготовка к сборке почти завершена, остались несколько шагов. Если вы этого ещё не сделали, нужно скачать архив с исходными кодами VirtualBox нужной версии и распаковать его в удобное место. В качестве рабочего каталога я выбрал <code>C:\Devel\</code>; в него я распаковал архив исходных кодов и переименовал полученный каталог в <code>VirtualBox-src</code>.<br/>
<br/>
<h5>• Добавление сертификатов</h5>
Если у вас нет полноценного сертификата, то рекомендуется создать хотя бы персональный (с ним проще загружать драйверы, чем совсем без подписи). Для этого нужно открыть консоль с повышенными привилегиями и выполнить в ней следующие команды:
<source lang=".bat">"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x64 /win7
COLOR 07
makecert.exe -a sha1 -r -pe -ss my -n "CN=Roga and Kopyta Ltd" C:\Devel\testcert_1.cer
makecert.exe -a sha256 -r -pe -ss my -n "CN=Roga and Kopyta Ltd" C:\Devel\testcert_256.cer
certmgr.exe -add C:\Devel\testcert_1.cer -s -r localMachine root
certmgr.exe -add C:\Devel\testcert_256.cer -s -r localMachine root</source>
Имя для сертификатов («Roga and Kopyta Ltd») и путь к файлам можно выбирать по своему усмотрению. Поскольку имена одинаковые, для различения сертификатов нужно будет использовать цифровой отпечаток. Откройте консоль управления сертификатами (запустите <code>certmgr.msc</code>), откройте там список персональных сертификатов. Дважды щёлкните на первом из сертификатов «Roga and Kopyta Ltd», в открывшемся диалоге перейдите на вкладку Details. В поле Signature algorithm будет указан алгоритм подписи: sha256RSA или sha1RSA. Далее, в самом конце списка будет поле Thumbprint со значением в виде последовательности шестнадцатеричных чисел. Скопируйте это значение куда-нибудь. То же самое повторите для второго из сертификатов. Не забудьте отметить, какой из них был sha256, а какой — sha1. (Более простым решением было бы задать разные имена сертификатам, но две разноимённых подписи будут смотреться неэстетично.)<br/>
<br/>
<h5>• Сборка xmllint</h5>
На одном из этапов потребуется также программа xmllint. Я не указывал её в списке требований, потому что необходимые исходники уже присутствуют в архиве VB. Сборочные правила не рассчитаны на автоматическую сборку этой утилиты, поэтому её придётся собрать отдельно. В качестве целевого каталога я выбрал <code>C:\Programs\xmllint</code>.
<ol>
<li>Копируем содержимое каталога <code>C:\Devel\VirtualBox-src\src\libs\libxml2-2.9.4</code> в <code>C:\Programs\libxml2-2.9.4\</code> (это необходимо, чтобы промежуточные объектные файлы не мешали сборке самого VB).</li>
<li>Открываем консоль и выполняем команды:
<source lang=".bat">"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x64 /win7
COLOR 07
cd /d C:\Programs\libxml2-2.9.4\win32
cscript.exe configure.js cruntime=/MT prefix=C:\Programs\xmllint iconv=no
nmake /f Makefile.msvc
nmake /f Makefile.msvc install</source>
</li>
<li>Удаляем каталог <code>C:\Programs\libxml2-2.9.4</code>.</li>
</ol>
<br/>
<h5>• Различные правки VB</h5>
Прежде чем приступать к сборке, нам ещё потребуется внести кое-какие правки в исходные коды самого VirtualBox. Так что переходим в каталог <code>C:\Devel\VirtualBox-src</code> и начинаем:
<ol>
<li>
Открываем файл <code>configure.vbs</code>, проделываем с ним вот такие издевательства:
<ul>
<li>
Находим код (строка 1094):
<source lang="vbscript">if Shell(DosSlashes(strPathVC &amp; "/bin/cl.exe"), True) &lt;&gt; 0 then</source>
и заменяем на следующий:
<source lang="vbscript">if Shell(DosSlashes(strPathVC &amp; "/bin/cl.exe") &amp; " /?", True) &lt;&gt; 0 then</source>
Этот кусок отвечает за поиск и проверку компилятора, но не учитывает, что вызов <code>cl.exe</code> без аргументов возвращает ошибку (что трактуется как неподходящий компилятор). Добавление параметра «<code>/?</code>» запрашивает вывод справки, и код возврата перестаёт быть ошибочным.
</li>
<li>
Теперь переходим к функции <code>CheckForMinGW32Sub</code> (строки 1506–1559). Здесь проверяется корректность 32-битного MinGW с расчётом на версию 3.3.3. У нас используется версия 4.5.4, где структура файлов/каталогов довольно сильно отличается, поэтому всю функцию заменяем на следующий код (я его просто перенёс из <code>CheckForMinGWw64Sub</code>, немного адаптировав):
<source lang="vbscript">function CheckForMinGW32Sub(strPathMingW32, strPathW32API)
   g_strSubOutput = ""
   if strPathW32API = "" then strPathW32API = strPathMingW32
   LogPrint "trying: strPathMingW32="  &amp;strPathMingW32 &amp; " strPathW32API=" &amp; strPathW32API

   if   LogFileExists(strPathMingW32, "bin/gcc.exe") _
    And LogFileExists(strPathMingW32, "bin/ld.exe") _
    And LogFileExists(strPathMingW32, "bin/objdump.exe") _
    And LogFileExists(strPathMingW32, "bin/dllwrap.exe") _
    And LogFileExists(strPathMingW32, "bin/dlltool.exe") _
    And LogFileExists(strPathMingW32, "bin/as.exe") _
    And LogFileExists(strPathMingW32, "include/bfd.h") _
    And LogFileExists(strPathMingW32, "lib32/libgcc_s.a") _
    And LogFileExists(strPathMingW32, "i686-w64-mingw32/lib/dllcrt1.o") _
    And LogFileExists(strPathMingW32, "i686-w64-mingw32/lib/dllcrt2.o") _
    And LogFileExists(strPathMingW32, "i686-w64-mingw32/lib/libmsvcrt.a") _
    And LogFileExists(strPathMingW32, "i686-w64-mingw32/lib/libmsvcr100.a") _
    And LogFileExists(strPathMingW32, "i686-w64-mingw32/include/_mingw.h") _
    And LogFileExists(strPathMingW32, "i686-w64-mingw32/include/stdint.h") _
    And LogFileExists(strPathMingW32, "i686-w64-mingw32/include/windows.h") _
      then
      if Shell(DosSlashes(strPathMingW32 &amp; "/bin/gcc.exe") &amp; " -dumpversion", True) = 0 then
         dim offVer, iMajor, iMinor, iPatch, strVer

         ' extract the version.
         strVer = Trim(Replace(Replace(g_strShellOutput, vbCr, ""), vbLf, ""))
         if   (Mid(strVer, 2, 1) = ".") _
          And (Mid(strVer, 4, 1) = ".") then
            iMajor = Int(Left(strVer, 1)) ' Is Int() the right thing here? I want atoi()!!!
            iMinor = Int(Mid(strVer, 3, 1))
            iPatch = Int(Mid(strVer, 5))
         else
            LogPrint "Malformed version: '" &amp; strVer &amp; "'"
            strVer = ""
         end if
         if strVer &lt;&gt; "" then
            if (iMajor = 4) And (iMinor &gt;= 4) then
               CheckForMinGW32Sub = True
               g_strSubOutput = strVer
            else
               LogPrint "MinGW32 version '" &amp; iMajor &amp; "." &amp; iMinor &amp; "." &amp; iPatch &amp; "' is not supported (or configure.vbs failed to parse it correctly)."
            end if
         else
            LogPrint "Couldn't locate the GCC version in the output!"
         end if

      else
         LogPrint "Failed to run gcc.exe!"
      end if
   end if
end function</source>
</li>
<li>
Идём далее, находим функцию <code>CheckForCurlSub</code>, в ней — вот такой код (строки 1980–1982, с учётом предыдущих правок):
<source lang="vbscript">   if   LogFileExists(strPathCurl, "include/curl/curl.h") _
    And LogFindFile(strPathCurl, "libcurl.dll") <> "" _
    And LogFindFile(strPathCurl, "libcurl.lib") <> "" _</source>
Этот код выполняет поиск и проверку пути к libcurl, но он рассчитан только на использование динамически линкуемой версии библиотеки и, если не находит соответствующий DLL-файл, ругается некультурными словами. Поскольку мы собираем со статической версией, эту проверку надо поправить, удалив строчку с <code>libcurl.dll</code>, чтобы получилось:
<source lang="vbscript">   if   LogFileExists(strPathCurl, "include/curl/curl.h") _
    And LogFindFile(strPathCurl, "libcurl.lib") <> "" _</source>
</li>
<li>
Теперь перейдём к функции <code>CheckForPython</code>, там есть генерация переменной <code>VBOX_BLD_PYTHON</code> (строка 2063):
<source lang="vbscript">      CfgPrint "VBOX_BLD_PYTHON       := " & strPathPython & "\python.exe"</source>
Здесь нужно обратный слэш перед python.exe заменить на прямой: <code>"/python.exe"</code> (иначе некоторые проверки падают; вроде бы, для сборки это некритично, но неаккуратно).
</li>
</ul>
</li>
<li>
Теперь переходим к файлу <code>src\VBox\Runtime\Makefile.kmk</code>, находим там определения переменных <code>VBoxRT_LIBS.win</code> (строка 1690) и <code>VBoxRT-x86_LIBS.win</code> (строка 1838) и добавляем к ним <code>crypt32.lib</code>:
<source>VBoxRT_LIBS.win                = \
	$(PATH_SDK_$(VBOX_WINDDK)_LIB)/vccomsup.lib \
	$(PATH_SDK_$(VBOX_WINDDK)_LIB)/wbemuuid.lib \
	$(PATH_TOOL_$(VBOX_VCC_TOOL)_LIB)/delayimp.lib
</source>
заменяется на:
<source>VBoxRT_LIBS.win                = \
	$(PATH_SDK_$(VBOX_WINDDK)_LIB)/vccomsup.lib \
	$(PATH_SDK_$(VBOX_WINDDK)_LIB)/wbemuuid.lib \
	$(PATH_TOOL_$(VBOX_VCC_TOOL)_LIB)/delayimp.lib \
	$(PATH_SDK_$(VBOX_WINPSDK)_LIB)/crypt32.lib</source>
(не пропустите обратный слэш после <code>delayimp.lib</code>!); и аналогично:
<source>VBoxRT-x86_LIBS.win                = \
	$(PATH_SDK_$(VBOX_WINDDK)_LIB.x86)/vccomsup.lib \
	$(PATH_SDK_$(VBOX_WINDDK)_LIB.x86)/wbemuuid.lib \
	$(PATH_TOOL_$(VBOX_VCC_TOOL_STEM)X86_LIB)/delayimp.lib</source>
заменяется на:
<source>VBoxRT-x86_LIBS.win                = \
	$(PATH_SDK_$(VBOX_WINDDK)_LIB.x86)/vccomsup.lib \
	$(PATH_SDK_$(VBOX_WINDDK)_LIB.x86)/wbemuuid.lib \
	$(PATH_TOOL_$(VBOX_VCC_TOOL_STEM)X86_LIB)/delayimp.lib \
	$(PATH_SDK_$(VBOX_WINPSDK)_LIB.x86)/crypt32.lib</source>
Это требуется для успешной линковки библиотеки <code>VBoxRT.dll</code>. Я не до конца разобрался в этой особенности: в дистрибутиве Oracle нет зависимости от библиотеки <code>crypt32.dll</code>, она там загружается динамически во время выполнения, поэтому, теоретически, LIB-файл добавлять не нужно. Однако если этого не сделать, линковщик не может найти некоторые функции и отказывается собирать библиотеку. Пришлось добавить.
</li>
<li>
Если вы используете gSOAP версии 2.8.45 или выше, то требуется подправить файл <code>src\VBox\Runtime\r3\win\VBoxRT-openssl-1.1plus.def</code>, добавив куда-нибудь в общий список строчку:
<source>X509_STORE_set_flags</source>
(я добавляю после строки 206, <code>X509_VERIFY_PARAM_set_flags</code>). Этот список определяет набор функций, экспортируемых библиотекой <code>VBoxRT.dll</code>. В gSOAP 2.8.45 добавили вызов функции <code>X509_STORE_set_flags()</code>, линковщик не может найти её в <code>VBoxRT</code>, подключает OpenSSL и тут же начинает материться из-за того, что эта внешняя OpenSSL начинает драться со своей копией, внедрённой внутрь <code>VBoxRT</code>. Добавление экспорта устраняет эту проблему.
</li>
<li>
Открываем файл <code>src\VBox\Additions\Makefile.kmk</code>, находим там в строках 268–281 блок кода вида:
<source>if defined(VBOX_WITH_ADDITIONS_ISO.win.amd64) || defined(VBOX_WITH_ADDITIONS_ISO.win.x86)
	&lt;…&gt;
endif</source>
и удаляем его целиком. Здесь происходит какая-то хитрая машинерия, связанная с сертификатами для гостевых дополнений. Мы их не собираем, поэтому этот код будет только мешать.<br/>
Ниже в этом же файле видим правило для сборки ISO-образа гостевых дополнений (строки 296–315 с учётом предыдущей правки), начинающееся с объявления:
<source>$(VBOX_PATH_ADDITIONS_ISO)/VBoxGuestAdditions.iso: \</source>
Удаляем этот блок и вставляем вместо него единственную команду для загрузки официального образа:
<source>$(VBOX_PATH_ADDITIONS_ISO)/VBoxGuestAdditions.iso:
	$(VBOX_RETRY) $(TOOL_CURL_FETCH) http://download.virtualbox.org/virtualbox/$(VBOX_VERSION_STRING_RAW)/VBoxGuestAdditions_$(VBOX_VERSION_STRING_RAW).iso -o $@</source>
</li>
<li>
Открываем файл <code>src\VBox\Additions\WINNT\tools\Makefile.kmk</code>, находим там в строках 44–69 ещё один кусок кода, отвечающий за сертификаты в гостевых дополнениях:
<source>#
# Install all the certificates we use here.
#
INSTALLS += AdditionsInstCertFiles
AdditionsInstCertFiles_TEMPLATE = VBoxGuestR3Exe
AdditionsInstCertFiles_SOURCES  =
AdditionsInstCertFiles_CLEAN    =
ifdef VBOX_SIGNING_MODE
	&lt;…&gt;
endif</source>
и удаляем его тоже.
</li>
<li>
Если VB собирается с подписыванием, то для большинства исполняемых файлов выставляется флаг принудительной проверки подписи (опция компоновщика <code>/IntegrityCheck</code>). Если у вас полноценный сертификат, это не проблема. Если нет — VB просто откажется запускаться после установки (даже в тестовом режиме). Я модифицировал файл <code>Config.kmk</code> таким образом, чтобы флаг добавлялся только при использовании полноценного сертификата (сертификат считается полноценным, если в файле <code>LocalConfig.kmk</code> задан кросс-сертификат; см. ниже). Набор исправлений заключается в следующем.
<ul>
<li>Вставить блок определения переменной <code>VBOX_INTEGRITY_CHECK</code>, которая будет использоваться вместо фиксированной опции. Я добавил этот блок кода перед строкой «<code>define VBOX_RE_SIGN_DLL_INTERNAL_FN</code>» (номер строки 3696):
<source>if defined(VBOX_SIGNING_MODE) &amp;&amp; defined(VBOX_CROSS_CERTIFICATE_FILE)
	VBOX_INTEGRITY_CHECK := /IntegrityCheck
else
	VBOX_INTEGRITY_CHECK := /IntegrityCheck:NO
endif</source>
</li>
<li>Чуть ниже, в строке 3712 (номер строки дан с учётом предыдущей вставки) будет команда:
<source>	$(VBOX_VCC_EDITBIN) /LargeAddressAware /DynamicBase /NxCompat /Release /IntegrityCheck \
		/Version:$(VBOX_VERSION_MAJOR)0$(VBOX_VERSION_MINOR).$(VBOX_VERSION_BUILD) \
		"$@"</source>
Замените здесь <code>/IntegrityCheck</code> на <code>$(VBOX_INTEGRITY_CHECK)</code>.
</li>
<li>Теперь нужно найти все вхождения следующего вида:
<source>ifdef VBOX_SIGNING_MODE
 TEMPLATE_XXXXXX_LDFLAGS          += -IntegrityCheck
endif</source>
или
<source>if defined(VBOX_SIGNING_MODE) &amp;&amp; defined(VBOX_WITH_HARDENING)
 TEMPLATE_XXXXXX_LDFLAGS          += -IntegrityCheck
endif</source>
где вместо «<code>XXXXXX</code>» могут быть различные имена компонентов. В VB 5.2.18 таких вхождений — 6 штук, по три каждого вида (номера строк с учётом вышеприведённой вставки: 4072, 4211, 4330, 4770, 5618, 6148). Здесь нужно добавить условие, что переменная кросс-сертификата определена. В итоге первая строчка должна выглядеть, соответственно, как
<source>if defined(VBOX_SIGNING_MODE) &amp;&amp; defined(VBOX_CROSS_CERTIFICATE_FILE)</source>
или
<source>if defined(VBOX_SIGNING_MODE) &amp;&amp; defined(VBOX_CROSS_CERTIFICATE_FILE) &amp;&amp; defined(VBOX_WITH_HARDENING)</source>
</li>
</ul>
</li>
<li>
Ну и, наконец, создаём в корне рабочего каталога файл с именем <code>LocalConfig.kmk</code>, в который прописываем следующее содержимое:
<source>VBOX_WITH_HARDENING :=
VBOX_PATH_WIX := C:\Programs\WiX
VBOX_GSOAP_INSTALLED := 1
VBOX_PATH_GSOAP := C:\Programs\gSOAP
VBOX_WITH_COMBINED_PACKAGE := 1
VBOX_WITH_QT_PAYLOAD := 1
VBOX_WITH_QTGUI_V5 := 1
VBOX_SIGNING_MODE := release
VBOX_CERTIFICATE_SUBJECT_NAME := Roga and Kopyta Ltd
VBOX_CERTIFICATE_FINGERPRINT := XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX
VBOX_CERTIFICATE_SHA2_SUBJECT_NAME := Roga and Kopyta Ltd
VBOX_CERTIFICATE_SHA2_FINGERPRINT := XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX XX
VBOX_TSA_URL := http://timestamp.digicert.com
VBOX_TSA_SHA2_URL := http://timestamp.digicert.com
VBOX_TSA_URL_ARGS := /t "$(VBOX_TSA_URL)"
VBOX_TSA_SHA2_URL_ARGS := /tr "$(VBOX_TSA_SHA2_URL)" /td sha256
VBOX_CROSS_CERTIFICATE_FILE :=
VBOX_CROSS_CERTIFICATE_FILE_ARGS :=
VBOX_CROSS_CERTIFICATE_SHA2_FILE :=
VBOX_CROSS_CERTIFICATE_SHA2_FILE_ARGS :=
VBOX_PATH_SIGN_TOOLS := C:\Programs\DevKits\8.1\bin\x64
VBOX_PATH_SELFSIGN := C:\WinDDK\7600.16385.1\bin\selfsign
VBOX_PATH_WISUMINFO := "C:\Program Files\Microsoft SDKs\Windows\v7.1\Samples\sysmgmt\msi\scripts\WiSumInf.vbs"
VBOX_PATH_WISUBSTG  := "C:\Program Files\Microsoft SDKs\Windows\v7.1\Samples\sysmgmt\msi\scripts\WiSubStg.vbs"
VBOX_WITH_DOCS := 1
VBOX_WITH_DOCS_CHM := 1
VBOX_WITH_DOCS_PACKING := 1
VBOX_HAVE_XMLLINT := C:\Programs\xmllint\bin\xmllint.exe
VBOX_PATH_DOCBOOK        := C:/Programs/DocBook/xsl/
VBOX_PATH_DOCBOOK_DTD    := C:/Programs/DocBook/xml/
VBOX_XML_CATALOG         := $(PATH_TARGET)/manual/catalog
VBOX_XML_CATALOG_DOCBOOK := $(PATH_TARGET)/manual/docbook
VBOX_PATH_HTML_HELP_WORKSHOP := "C:\Program Files (x86)\HTML Help Workshop"
VBOX_PDFLATEX := C:\Programs\MiKTeX\miktex\bin\pdflatex.exe
VBOX_PDFLATEX_CMD := $(VBOX_PDFLATEX) -halt-on-error -interaction batchmode
TOOL_CURL_FETCH := C:\Programs\curl\x64\curl.exe
PATH_TOOL_NASM := C:/Programs/nasm
VBOX_INSTALLER_LANGUAGES := en_US
VBOX_WITH_TESTCASES :=
VBOX_WITH_VALIDATIONKIT :=
VBOX_WITH_VBOX_IMG := 1
VBOX_BUILD_PUBLISHER := _OSE</source>
В вышеприведённом шаблоне необходимо кое-что подправить:
<ul>
<li>В переменных <code>VBOX_CERTIFICATE_SUBJECT_NAME</code> и <code>VBOX_CERTIFICATE_SHA2_SUBJECT_NAME</code> потребуется указать имена используемых вами сертификатов для подписи SHA-1 и SHA-256, соответственно.</li>
<li>В переменных <code>VBOX_CERTIFICATE_FINGERPRINT</code> и <code>VBOX_CERTIFICATE_SHA2_FINGERPRINT</code> пропишите цифровые отпечатки, которые были скопированы ранее из консоли управления сертификатами.</li>
<li>Если у вас не самоподписанный сертификат, а покупной, то удалите строчки с переменными <code>VBOX_CROSS_CERTIFICATE_FILE_ARGS</code> и <code>VBOX_CROSS_CERTIFICATE_SHA2_FILE_ARGS</code>, а в переменных <code>VBOX_CROSS_CERTIFICATE_FILE</code> и <code>VBOX_CROSS_CERTIFICATE_SHA2_FILE</code> (без «<code>_ARGS</code>») задайте полный путь к файлу кросс-сертификата (без него драйверы не будут считаться подписанными). Его можно найти на сайте компании, выпустившей сертификат, или <a href="https://msdn.microsoft.com/en-us/library/windows/hardware/dn170454(v=vs.85).aspx">у Microsoft</a>.</li>
<li>Для более тонкой настройки подписывания имеется множество других переменных, с помощью которых можно задать хранилище, адрес сервера для наложения временно́й метки или вообще задать произвольный дополнительный набор аргументов для утилиты <code>signtool</code>. В файле <code>Config.kmk</code> под комментарием «Code Signing» (начиная со строки 3267) можно посмотреть, какие там переменные определяются и как они используются.</li>
<li>Если вы устанавливали какие-то из программ в каталоги, отличающиеся от моих, нужно поправить пути в соответствующих переменных.</li>
<li>Для WiX необходимо указывать путь к исполняемым файлам. Для портативной версии это каталог, куда был распакован архив; для установленной версии это подкаталог <code>bin</code>. Обратите внимание, что если путь содержит пробелы, то необходимо преобразовать его в формат 8.3. Для этого можно воспользоваться командой <code>dir /x</code>. Трюк со взятием в кавычки здесь, увы, не работает.</li>
<li>Переменная <code>VBOX_BUILD_PUBLISHER</code> задаёт брэндированный суффикс в номере версии. По умолчанию это «_OSE» (т. е. продукт имеет версию «5.2.18_OSE»). Здесь вы можете поменять его на что-то другое или даже на пустую строку, чтобы убрать суффикс совсем (если переменная отсутствует, применится суффикс «_OSE»).</li>
</ul>
Остальные переменные используются в основном для выбора собираемых компонентов. Ну и главная строка, ради которой всё и затевалось, идёт самой первой: отключаем hardening.<br/>
</li>
</ol>
<br/>

<anchor>build-vb</anchor><h4><img src="<%bullet%>"/> Собираем VirtualBox</h4><br/>
Ну вот, теперь, наконец, можно и приступать к сборке собственно VirtualBox. Если вы любите параллельную сборку, то придётся от этой привычки временно отказаться (или собирать в двух копиях дерева исходных кодов): здесь используется общий файл конфигурации, который нужно перегенерировать перед началом сборки. И если во время 64-битной компиляции в нём неожиданно окажутся пути к 32-битным библиотекам, компилятору это очень не понравится.<br/>
<ol>
<li>
Начинаем со сборки 64-битной версии. Открываем консоль, выполняем команды:
<source lang=".bat">cd /d C:\Devel\VirtualBox-src
"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x64 /win7
COLOR 07
set BUILD_TARGET_ARCH=amd64
cscript configure.vbs --with-DDK=C:\WinDDK\7600.16385.1 --with-MinGW-w64=C:\Programs\mingw64 --with-MinGW32=C:\Programs\mingw32 --with-libSDL=C:\Programs\SDL\x64 --with-openssl=C:\Programs\OpenSSL\x64 --with-openssl32=C:\Programs\OpenSSL\x32 --with-libcurl=C:\Programs\curl\x64 --with-libcurl32=C:\Programs\curl\x32 --with-Qt5=C:\Programs\Qt\5.6.3-x64 --with-python=C:/Programs/Python
env.bat
kmk
kmk C:/Devel/VirtualBox-src/out/win.x86/release/obj/Installer/VirtualBox-5.2.18_OSE-r123745-MultiArch_amd64.msi</source>
Скрипт <code>configure.vbs</code> проверяет окружение и создаёт файлы конфигурации (<code>AutoConfig.kmk</code> и <code>env.bat</code>). Первый запуск <code>kmk</code> выполняет сборку бинарных компонентов и помещает их в каталог <code>out\win.amd64\bin\</code>. Последняя команда собирает из этих компонентов промежуточный MSI-архив. Важные моменты:
<ul>
<li>Слэши в последней команде должны быть обязательно прямыми. С обратными <code>kmk</code> не найдёт сборочные правила.</li>
<li>Хоть мы собираем 64-битную версию, архив располагается в подкаталоге <code>out\win.x86\…</code>, потому что финальная сборка будет производиться из 32-битного окружения.</li>
<li>Если вы меняли суффикс версии, то «_OSE» в имени MSI-файла необходимо поправить на то, что вы задали в переменной <code>VBOX_BUILD_PUBLISHER</code>.</li>
<li>Ревизию в имени MSI-файла (123745) можно найти в файле <code>Config.kmk</code> в переменной <code>VBOX_SVN_REV_FALLBACK</code> (строка 7210). На текущий момент это значение не соответствует ревизии официальных дистрибутивов (для версии 5.2.18 она должна быть 124319), так что не удивляйтесь. При желании можно этот номер заменить на любой другой вручную, но мне не удалось пока найти способа точно определить, из какой ревизии был собран архив с исходниками. Пробовал пнуть разработчиков, но моё письмо было благополучно проигнорировано.</li>
</ul>
</li>
<li>
Теперь компилируем 32-битную версию и пакуем весь комплект в единый инсталлятор. Открываем новую консоль, выполняем команды:
<source lang=".bat">cd /d C:\Devel\VirtualBox-src
"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x86 /win7
COLOR 07
set BUILD_TARGET_ARCH=x86
cscript configure.vbs --with-DDK=C:\WinDDK\7600.16385.1 --with-MinGW-w64=C:\Programs\mingw64 --with-MinGW32=C:\Programs\mingw32 --with-libSDL=C:\Programs\SDL\x32 --with-openssl=C:\Programs\OpenSSL\x32 --with-libcurl=C:\Programs\curl\x32 --with-Qt5=C:\Programs\Qt\5.6.3-x32 --with-python=C:/Programs/Python
env.bat
kmk
kmk C:/Devel/VirtualBox-src/out/win.x86/release/bin/VirtualBox-5.2.18_OSE-r123745-MultiArch.exe</source>
Аналогично, суффикс «_OSE» в имени итогового файла надо поменять на свой.<br/>
Обратите внимание, что в последней команде указано расширение <code>EXE</code>, а не <code>MSI</code>. Мы собираем сразу финальный инсталлятор, а промежуточный 32-битный MSI-архив соберётся автоматически, по зависимостям.
</li>
</ol>
<br/>
Если ни я, ни вы ничего не перепутали, то после всех этих перипетий у вас должен получиться инсталлятор VirtualBox, отличающийся от Oracle-версии только значком исполняемого файла, картинкой в диалоге «О программе» и, конечно же, отключённым hardening'ом. При желании значок и картинку тоже можно поменять, но это тема отдельного разговора.<br/>
<br/>
Для удобства я свёл запуск этих двух цепочек команд в единый файл. Если вам регулярно нужно пересобирать пакет, удобнее пользоваться им.
<spoiler title="Единый батник">
<source lang=".bat">@echo off

cd /d %~dp0
for /f "tokens=3" %%i in ('findstr /B /R /C:"VBOX_VERSION_MAJOR *=" Version.kmk') do SET VBOX_VER_MJ=%%i
for /f "tokens=3" %%i in ('findstr /B /R /C:"VBOX_VERSION_MINOR *=" Version.kmk') do SET VBOX_VER_MN=%%i
for /f "tokens=3" %%i in ('findstr /B /R /C:"VBOX_VERSION_BUILD *=" Version.kmk') do SET VBOX_VER_BLD=%%i
for /f "tokens=6" %%i in ('findstr /C:"$Rev: " Config.kmk') do SET VBOX_REV=%%i
for /f "tokens=3" %%i in ('findstr /B /C:"VBOX_BUILD_PUBLISHER :=" LocalConfig.kmk') do SET VBOX_VER_PUB=%%i

set VERSION=%VBOX_VER_MJ%.%VBOX_VER_MN%.%VBOX_VER_BLD%%VBOX_VER_PUB%-r%VBOX_REV%
set VBOX_VER_MJ=
set VBOX_VER_MN=
set VBOX_VER_BLD=
set VBOX_VER_PUB=

del /q build-tmp.cmd 2&gt;nul

echo @echo off&gt;&gt; build-tmp.cmd
echo call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x64 /win7&gt;&gt; build-tmp.cmd
echo color 07&gt;&gt; build-tmp.cmd
echo echo.&gt;&gt; build-tmp.cmd
echo echo ### %VERSION%: BUILDING x64 VERSION ###&gt;&gt; build-tmp.cmd
echo echo.&gt;&gt; build-tmp.cmd
echo set BUILD_TARGET_ARCH=amd64&gt;&gt; build-tmp.cmd
echo cscript configure.vbs --with-DDK=C:\WinDDK\7600.16385.1 --with-MinGW-w64=C:\Programs\mingw64 --with-MinGW32=C:\Programs\mingw32 --with-libSDL=C:\Programs\SDL\x64 --with-openssl=C:\Programs\OpenSSL\x64 --with-openssl32=C:\Programs\OpenSSL\x32 --with-libcurl=C:\Programs\curl\x64 --with-libcurl32=C:\Programs\curl\x32 --with-Qt5=C:\Programs\Qt\5.6.3-x64 --with-python=C:/Programs/Python&gt;&gt; build-tmp.cmd
echo if ERRORLEVEL 1 exit /b ^1&gt;&gt; build-tmp.cmd
echo call env.bat&gt;&gt; build-tmp.cmd
echo kmk&gt;&gt; build-tmp.cmd
echo if ERRORLEVEL 1 exit /b ^1&gt;&gt; build-tmp.cmd
echo kmk C:/Devel/VirtualBox-src/out/win.x86/release/obj/Installer/VirtualBox-%VERSION%-MultiArch_amd64.msi&gt;&gt; build-tmp.cmd
echo if ERRORLEVEL 1 exit /b ^1&gt;&gt; build-tmp.cmd

cmd /c build-tmp.cmd
if ERRORLEVEL 1 exit /b 1

del /q build-tmp.cmd 2&gt;nul

echo @echo off&gt;&gt; build-tmp.cmd
echo call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.Cmd" /Release /x86 /win7&gt;&gt; build-tmp.cmd
echo color 07&gt;&gt; build-tmp.cmd
echo echo.&gt;&gt; build-tmp.cmd
echo echo ### %VERSION%: BUILDING x32 VERSION ###&gt;&gt; build-tmp.cmd
echo echo.&gt;&gt; build-tmp.cmd
echo set BUILD_TARGET_ARCH=x86&gt;&gt; build-tmp.cmd
echo cscript configure.vbs --with-DDK=C:\WinDDK\7600.16385.1 --with-MinGW-w64=C:\Programs\mingw64 --with-MinGW32=C:\Programs\mingw32 --with-libSDL=C:\Programs\SDL\x32 --with-openssl=C:\Programs\OpenSSL\x32 --with-libcurl=C:\Programs\curl\x32 --with-Qt5=C:\Programs\Qt\5.6.3-x32 --with-python=C:/Programs/Python&gt;&gt; build-tmp.cmd
echo if ERRORLEVEL 1 exit /b ^1&gt;&gt; build-tmp.cmd
echo call env.bat&gt;&gt; build-tmp.cmd
echo kmk&gt;&gt; build-tmp.cmd
echo if ERRORLEVEL 1 exit /b ^1&gt;&gt; build-tmp.cmd
echo kmk C:/Devel/VirtualBox-src/out/win.x86/release/bin/VirtualBox-%VERSION%-MultiArch.exe&gt;&gt; build-tmp.cmd
echo if ERRORLEVEL 1 exit /b ^1&gt;&gt; build-tmp.cmd

cmd /c build-tmp.cmd
if ERRORLEVEL 1 exit /b 1

del /q build-tmp.cmd AutoConfig.kmk configure.log env.bat 2&gt;nul

echo.
echo ### BUILD COMPLETE ###
echo.</source>
</spoiler>
<br/>
Как неожиданно обнаружилось после выхода статьи, самоподписанный дистрибутив VB отказывается устанавливаться на современные системы (Windows 8/10), сообщая о невалидной подписи драйверов. Причём это происходит даже в тестовом режиме, где валидность подписи не должна играть никакой роли. Чтобы обойти эту проблему, необходимо добавить использовавшиеся сертификаты в корневое хранилище:
<ol>
<li>Откройте свойства скачанного файла дистрибутива: правый щелчок &rarr; Properties, перейдите на вкладку Digital Signatures. Там будут две подписи от «Roga and Kopyta Ltd»: sha1 и sha256. Выделяем первую, жмём Details.</li>
<li>В открывшемся диалоге жмём кнопку View Certificate.</li>
<li>В новом диалоге жмём Install Certificate.</li>
<li>Выбираем для установки Local Machine, Next. Подтверждаем UAC-запрос. Отмечаем пункт "Place all certificates in the following store", нажимаем Browse и выбираем хранилище "Trusted Root Certification Authorities". Next, Finish. Сертификат установлен.</li>
<li>Закрываем все диалоги, кроме самого первого, выделяем подпись sha256, повторям для неё шаги 3–5.</li>
<li>Закрываем все диалоги, запускаем установку.</li>
</ol>
<br/>
<anchor>afterword</anchor><h4><img src="<%bullet%>"/> Послесловие</h4>
<br/>
Размер статьи оказался неожиданностью для меня самого. Когда я начинал её писать, то намеревался подробно рассказывать, почему на каждом этапе было выбрано то или иное решение, какие конкретно ошибки выскакивают, если не применить очередную правку, и какие могут быть альтернативные подходы к решению этих ошибок. Но постепенно понял, что если бы я всё это описывал, статья получилась бы и вовсе неприподъёмной. Поэтому прошу прощения за встречающийся кое-где стиль «делай так, а почему — не скажу». Сам недолюбливаю такие инструкции, но тут не видел иного выхода. Впрочем, в отдельных местах я всё-таки постарался хотя бы вкратце пояснить суть происходящего.<br/>
<br/>
Огромное количество аспектов сборочной системы VB осталось за кадром: как из-за нежелания раздувать текст, так и по причине моей лени, когда, найдя какой-то обходной путь для очередной проблемы, я не лез в глубины системы сборки, а поскорее переходил к следующему этапу. В конце концов, моей главной задачей было не найти оптимальный путь, а собрать, наконец, свой вариант актуального VirtualBox'а: сидеть на 4.3.12 уже поднадоело, но я не мог обновлять один из своих основных рабочих инструментов на нечто, что в любой момент может просто отказаться работать на неопределённый срок.<br/>
<br/>
Надеюсь всё же, что, несмотря на недостатки, эта статья окажется кому-нибудь полезной. Для тех, кому лень поднимать всё вышеописанное нагромождение программ, но интересно расковырять получающийся в итоге дистрибутив, я выложил инсталлятор на Яндекс-диск: <a href="https://yadi.sk/d/K4fG8Vj0Gugvhw">5.2.18</a>. Все драйверы в них (да и остальные файлы) подписаны недоверенным сертификатом, так что в 64-битной Windows этот вариант VB заработает только в тестовом режиме. Если имеются вопросы, пожелания, предложения — велкам в комментарии или в личку. И да пребудет с вами Open Source!<br/>
<br/>
<anchor>history</anchor><h4><img src="<%bullet%>"/> Дополнения</h4><br/>
<h5>• Обновление статьи от 24.05.2016</h5>
<ol>
<li>Внесены уточнения с учётом изменений в VB 5.0.20, в частности, двойное подписывание SHA-1/SHA-256.</li>
<li>Добавлено отключение флага принудительной проверки подписей, если собирается самоподписанный дистрибутив.</li>
<li>Добавлена инструкция по обходу ошибки установки самоподписанного дистрибутива.</li>
<li>Обновлены версии используемых библиотек.</li>
<li>Для ускорения сборки отключены некоторые неиспользуемые компоненты.</li>
<li>Исправлены мелкие недочёты.</li>
</ol>
<br/>
<h5>• Обновление статьи от 29.07.2016</h5>
<ol>
<li>Внесены уточнения с учётом изменений в VB 5.1.2, в частности, переход на Qt5. Отличия от процедуры сборки для 5.0.x оставлены в виде уточнений.</li>
<li>Обновлены версии используемых библиотек.</li>
<li>В итоговый сборочный скрипт добавлена проверка на корректность завершения каждой стадии.</li>
<li>Исправлены мелкие недочёты.</li>
</ol>
<br/>
<h5>• Обновление статьи от 15.09.2016</h5>
<ol>
<li>Внесены уточнения с учётом изменений в VB 5.1.6.</li>
<li>Обновлены версии используемых библиотек.</li>
<li>Добавлено использование NASM для сборки OpenSSL.</li>
<li>cURL теперь собирается с поддержкой OpenSSL, потому что иначе не работают функции проверки обновлений и загрузки пакета расширений.</li>
<li>Доработан комбинированный скрипт сборки, чтобы версия определялась автоматически.</li>
<li>Различные мелкие правки.</li>
</ol>
<br/>
<h5>• Обновление статьи от 30.11.2016</h5>
<ol>
<li>Внесены уточнения с учётом изменений в VB 5.1.10.</li>
<li>Обновлены версии используемых библиотек, в частности, выполнен переход на OpenSSL 1.1.x.</li>
<li>Исправлены ошибки инсталляции:
<ul>
<li>путь к плагинам Qt заменён на каталог установки приложения;</li>
<li>добавлены забытые библиотеки OpenSSL к 32-битным компонентам 64-битной версии VB.</li>
</ul>
</li>
<li>Удалена информация о сборке старых версий. Статья лежит в <a href="https://github.com/CaptainFlint/virtualbox-winbuild-article/">GitHub-проекте</a>, поэтому всё сохранено в истории коммитов.</li>
</ol>
<br/>
<h5>• Обновление статьи от 2.12.2016</h5>
<ol>
<li>Использование статической версии OpenSSL.</li>
</ol>
<br/>
<h5>• Обновление статьи от 20.06.2017</h5>
<ol>
<li>Внесены уточнения с учётом изменений в VB 5.1.22.</li>
<li>Актуализированы версии cURL, OpenSSL, gSOAP; поправлены сборочные инструкции для cURL, gSOAP и самого VB.</li>
</ol>
<br/>
<h5>• Обновление статьи от 1.12.2017</h5>
<ol>
<li>Внесены уточнения с учётом изменений в VB 5.2.2.</li>
<li>Переход с MinGW-32 3.3.3 на 4.5.4.</li>
<li>Актуализированы версии Qt, cURL, OpenSSL, gSOAP и некоторых сборочных инструментов; поправлены инструкции для cURL, gSOAP и самого VB.</li>
<li>Использование локальных архивов DocBook XML/XSL вместо онлайн-версий.</li>
<li>Переход с wget на curl для скачивания образа гостевых дополнений.</li>
<li>Различные мелкие правки.</li>
</ol>
<br/>
<h5>• Обновление статьи от 4.12.2017</h5>
<ol>
<li>Исправлена версия libxml в инструкциях.</li>
</ol>
<br/>
<h5>• Обновление статьи от 4.09.2018</h5>
<ol>
<li>Внесены уточнения с учётом изменений в VB 5.2.18.</li>
<li>Актуализированы версии cURL, OpenSSL, gSOAP и некоторых сборочных инструментов; поправлены инструкции для cURL.</li>
</ol>
